Score : P | Difficulty: Medium

Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

 

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Note: 

1 <= preorder.length <= 100
The values of preorder are distinct.




M's answer:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = new TreeNode(preorder[0]);
        for(int i = 1; i < preorder.length; i++){
            buildTree(root, preorder[i]);
        }
        return root;
    }
    
    public void buildTree(TreeNode root, int value) {
        if(root.val > value){
            if(root.left == null)
            {
                root.left = new TreeNode(value);
            }
            else{
                buildTree(root.left, value);
            }
        }
        else if(root.val < value){
            if(root.right == null){
                root.right = new TreeNode(value);
            }
            else{
                buildTree(root.right, value);
            }
        } 
    } 
}
