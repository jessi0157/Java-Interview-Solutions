Difficulty: Easy

We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:

If x == y, both stones are totally destroyed;
If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.
At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)

 

Example 1:

Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.
 

Note:

1 <= stones.length <= 30
1 <= stones[i] <= 1000

J's solution: 
class Solution {
    public int lastStoneWeight(int[] stones) {
        
        int newValue = 0;
        int i = stones.length - 1;
        int j = stones.length - 2;
        int n = 0;
        
        if(stones.length == 1) {return stones[0];} 
        while(n < stones.length){
            
            Arrays.sort(stones);

            if(stones[j] == stones[i]){
                stones[j] = 0;
                stones[i] = 0;
            }
            if(stones[j] != stones[i]){
                newValue = stones[i] - stones[j];
                stones[j] = newValue;
                stones[i] = 0;
            }  
            n++;
        }
        return stones[stones.length - 2];
    }
}

M's Solution O(NlogN * N):
class Solution {
    public int lastStoneWeight(int[] stones) {
        if(stones.length == 1){return stones[0];}
        Arrays.sort(stones);
        
        while(stones[stones.length - 2] != 0){
            int total = stones[stones.length - 1] - stones[stones.length - 2];
            if(total > 0)
            {
                stones[stones.length - 2] = 0;
                stones[stones.length - 1] = total;
            }
            else{
                stones[stones.length - 2] = 0;
                stones[stones.length - 1] = 0;
            }
            Arrays.sort(stones);
        }
        return stones[stones.length - 1];
    }
}
