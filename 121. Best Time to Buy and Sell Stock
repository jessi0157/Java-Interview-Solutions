Score : P | Difficulty Easy(Obtaining Most Optimal needs thinking)
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Site Official Solution (N):
public class Solution {
    public int maxProfit(int prices[]) {
        int minprice = Integer.MAX_VALUE;
        int maxprofit = 0;
        for (int i = 0; i < prices.length; i++) {
            if (prices[i] < minprice)
                minprice = prices[i];
            else if (prices[i] - minprice > maxprofit)
                maxprofit = prices[i] - minprice;
        }
        return maxprofit;
    }
}


Site Fastest Solution (N):
class Solution {
    public int maxProfit(int[] prices) {
        int max=Integer.MIN_VALUE, profit=0;
        for(int i=prices.length-1; i>=0; i--){
            if(max>prices[i]){
                profit = Math.max(profit, max-prices[i]);
            }
            else{
                max = prices[i];
            }       
        }
        return profit;
    }
}


M & J Solution (N^2):
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        for(int i = 0; i < prices.length; i++)
        {
            for(int j = i + 1; j < prices.length; j++)
            {
                if(prices[j] - prices[i] > profit)
                {
                    profit = prices[j] - prices[i];
                }
            }
        }
        return profit;
    }
}

M's Solution 2 (Linear):
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        int index1 = 0;
        int index2 = 1;
        while(index1 < prices.length && index2 < prices.length)
        {
            if(prices[index2] > prices[index1])
            {
                if(prices[index2] - prices[index1] > profit)
                {
                    profit = prices[index2] - prices[index1];
                }
            }

            if(index2 == prices.length - 1)
            {
                index1 = index1 + 1;
                index2 = index1;
            }
            index2++;
        }
        return profit;
    }
}
