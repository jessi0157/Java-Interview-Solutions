Given a palindromic string palindrome, replace exactly one character by any lowercase English letter so that the string becomes the lexicographically smallest possible string that isn't a palindrome.

After doing so, return the final string.  If there is no way to do so, return the empty string.

 

Example 1:

Input: palindrome = "abccba"
Output: "aaccba"
Example 2:

Input: palindrome = "a"
Output: ""
 

Constraints:

1 <= palindrome.length <= 1000
palindrome consists of only lowercase English letters.
Accepted


M's Answer with J's fixes:
class Solution {
    public String breakPalindrome(String palindrome) {
        if(palindrome.length() == 1){
            return "";
        }
        char[] string = palindrome.toCharArray();
        
        int changed = 0;
        for(int i = 0; i < string.length; i++){
            if(string[i] != 'a'){
                char temp = string[i];
                string[i] = 'a';
                boolean isPal = isPalindrome(string);
                
                if(!isPal){return String.valueOf(string);}
                string[i] = temp;
            }
        }
        string[string.length - 1] = 'b';
        return String.valueOf(string);
        
    }
    
    public boolean isPalindrome(char[] checkPalindrome){
        for(int i = 0; i < checkPalindrome.length/2; i++){
            if(checkPalindrome[i] != checkPalindrome[checkPalindrome.length - 1 - i]){
                return false;
            }
        }
        return true;
    }
}
