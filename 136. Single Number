Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4


SOLUTION 1:
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> ans = new HashMap<>();
        for(int i = 0; i < nums.length; i++)
        {
            if(ans.containsKey(nums[i]))
            {
                ans.replace(nums[i], ans.get(nums[i]) + 1);
            }
            else
            {
                ans.put(nums[i],1); //starts at 1
            }
        }
        
        System.out.println(ans);
        for(int i = 0; i < nums.length; i++)
        {
            if(ans.get(nums[i]) == 1)
            {
                return nums[i];
            }
        }
        return 0;
    }
}


SOLUTION 3:
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> ans = new HashMap<>();
        for(int i = 0; i < nums.length; i++)
        {
            ans.put(nums[i], ans.getOrDefault(nums[i], 0) + 1);
        }
        
        System.out.println(ans);
        
        for(int i = 0; i < nums.length; i++)
        {
            if(ans.get(nums[i]) == 1)
            {
                return nums[i];
            }
        }
        return 0;
    }
}

