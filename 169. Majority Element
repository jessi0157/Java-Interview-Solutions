Score : P | Difficulty : EZ
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

J + M Solution:
class Solution {
    public int majorityElement(int[] nums) {
        int counter = 1;
        Arrays.sort(nums);
        
        if(nums.length == 1)
        {
            return nums[0];
        }
        for(int i = 0; i < nums.length - 1; i++)
        {
            if(nums[i] == nums[i+1])
            {
                counter++;
                if(counter > nums.length/2)
                {
                    return nums[i];
                }
            }
            else
            {
                counter = 1;
            }
        }
        return -1;
    }
}

M's slower solution:
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        HashSet<Integer> set = new HashSet<>();
        for(int i = 0; i < nums.length; i++)
        {
            if(!set.contains(nums[i]))
            {
                map.put(nums[i], 1);
                set.add(nums[i]);
            }
            else
            {
                map.replace(nums[i], map.get(nums[i]) + 1);
            }
        }
        Iterator<Integer> iter = set.iterator();
        while(iter.hasNext())
        {
            int number = iter.next();
            if(map.get(number) > nums.length/2)
            {
                return number;
            }
        }
        return -1;
    }
}
