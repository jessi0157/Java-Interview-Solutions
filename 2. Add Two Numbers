Score : P | Difficulty : Medium(LOTS OF THINKING)
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

M's answer:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode answer = new ListNode(-1);
        ListNode dummy = answer;
        int remainder = 0;

        while(l1 != null || l2 != null){
            if(l1 == null){
                int result = l2.val + remainder;
                remainder = nextNode(dummy, result, remainder);
                dummy = dummy.next;
                
                l2 = l2.next;
            }
            else if(l2 == null){
                System.out.println(l1.val);
                int result = l1.val + remainder;
                remainder = nextNode(dummy, result, remainder);
                dummy = dummy.next;
                
                l1 = l1.next;
            }
            else{
                int result = l1.val + l2.val + remainder;
                remainder = nextNode(dummy, result, remainder);
                dummy = dummy.next;
                l1 = l1.next;
                l2 = l2.next;
            }
        }
        if(remainder == 1){
            dummy.next = new ListNode(1);
        }
        

        
        return answer.next;
    }
    
    public int nextNode(ListNode dummy, int result, int remainder){
        if(remainder == 1){
            remainder--;
        }
        if(result > 9){
            remainder = 1;
            dummy.next = new ListNode(result % 10);
        }
        else{
            dummy.next = new ListNode(result);
        }
        return remainder;
    }
}
