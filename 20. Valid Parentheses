Score : P || Difficulty : Easy
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true

M & J's cleaner sol:
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '{' || s.charAt(i) == '[' || s.charAt(i) == '('){
                stack.push(s.charAt(i));
            }
            else if(stack.isEmpty()){
                return false;
            }
            else if(s.charAt(i) == ']' && stack.peek() == '['){
                stack.pop();
            }
            else if(s.charAt(i) == '}' && stack.peek() == '{'){
                stack.pop();
            }
            else if(s.charAt(i) == ')' && stack.peek() == '('){
                stack.pop();
            }
            else
            {
                return false;
            }
        }
        return stack.isEmpty();
    }
}


M: Solution I ended up with:
class Solution {
    public boolean isValid(String s) {
        if(s.equals("")) return true;
        Stack<Character> stack = new Stack<>();
        for(char c : s.toCharArray())
        {
            if(c=='(')
            {
                stack.push(')');
            }
            else if(c=='{')
            {
                stack.push('}');
            }
            else if(c==('['))
            {
                stack.push(']');
            }
            else if(stack.empty() || stack.pop() != c)
            {
                return false;
            }
        }
        return stack.empty();
    }
}
M's 2020 solution:

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '{')
            {
                stack.push('}');
            }
            else if(s.charAt(i) == '}' && !stack.isEmpty())
            {
                stack.pop();
            }
            else if(s.charAt(i) == '(')
            {
                stack.push(')');
            }
            else if(s.charAt(i) == ')' && !stack.isEmpty())
            {
                stack.pop();
            }
            else if(s.charAt(i) == '[')
            {
                stack.push(']');
            }
            else if(s.charAt(i) == ']' && !stack.isEmpty())
            {
                stack.pop();
            }
            else
            {
                return false;
            }
        }
        return stack.isEmpty();
    }
}
