Score : P(Built in methods) | Difficulty : Medium
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

M's solution:
class Trie {
    ArrayList<String> container;
    /** Initialize your data structure here. */
    public Trie() {
        container = new ArrayList<String>();
    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        container.add(word);
    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        return container.contains(word);
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Iterator<String> iterator = container.iterator();
        while(iterator.hasNext()){
            String word = iterator.next();
            if(word.startsWith(prefix)){
                return true;
            }
        }
        return false;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
