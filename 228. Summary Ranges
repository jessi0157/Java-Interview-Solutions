Score : P | Difficulty : Medium
Given a sorted integer array without duplicates, return the summary of its ranges.

Example 1:

Input:  [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Explanation: 0,1,2 form a continuous range; 4,5 form a continuous range.
Example 2:

Input:  [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Explanation: 2,3,4 form a continuous range; 8,9 form a continuous range.

Website Answer(FASTEST):
class Solution {
    public List<String> summaryRanges(int[] nums) {
        
        List<String> ans = new ArrayList<String>();
        if(nums.length == 0){
            return ans;
        }
        int prev = nums[0],start = nums[0];
        StringBuilder sb = new StringBuilder("");

        for(int i=1;i<nums.length;i++){
            if(prev+1!=nums[i]){
                if(prev == start){
                    ans.add(Integer.toString(prev));
                }
                else{
                    sb.setLength(0);
                    sb.append(start).append("->").append(prev);
                    ans.add(sb.toString());
                }
                start = nums[i];
                prev = nums[i];
            }
            else{
                prev = nums[i];
            }
        }
        if(prev == start){
            ans.add(Integer.toString(prev));
        }
        else{
            sb.setLength(0);
            sb.append(start).append("->").append(prev);
            ans.add(sb.toString());
        }
        return ans;
    }
}


J's answer with help of M:
class Solution {
    public List<String> summaryRanges(int[] nums) {
        ArrayList<String> list = new ArrayList<String>();
        int start = 0;
        int end = 0;
        if(nums.length > 0){
            for(int i=1; i < nums.length; i++){
                if(nums[i] - 1 == nums[i-1]){
                    end = i;
                } else {
                    if(start >= end){
                         list.add("" + nums[start]);
                    }
                    else {
                        list.add(nums[start] + "->" + nums[end]);
                    }
                    start = i;               
                }
            }
            if(start >= end){
                list.add("" + nums[start]);
            }
            else {
                list.add(nums[start] + "->" + nums[end]);
            }            
        }

        return list;
    }
}

M's answer :
class Solution {
    public List<String> summaryRanges(int[] nums) {
        String end = "";
        ArrayList<String> ans = new ArrayList<>();
        
        if(nums.length == 0)
        {
            return ans;
        }
        else if(nums.length == 1)
        {
            ans.add("" + nums[0]);
            return ans;
        }
        
        int start = nums[0];
        
        for(int i = 1; i < nums.length; i++)
        {
            if(nums[i - 1] + 1 == nums[i])
            {
                end = "" + nums[i];
            }
            else
            {
                String addThis = "" + start;
                if( end.length() > 0)
                {
                    addThis += "->" + end;
                }
                ans.add(addThis);
                start = nums[i];
                end = "";
            }
            if(i == nums.length - 1)
            {
                if(start == nums[i])
                {
                    ans.add(nums[i] + "");
                }
                else
                {
                    ans.add(start + "->" + end);
                }
            }
        }
        return ans;
    }
}

M's new answer:
class Solution {
    public List<String> summaryRanges(int[] nums) {
        ArrayList<String> ans = new ArrayList<>();
        int start = 0;
        int end = 0;
        
        if(nums.length == 0){return ans;}
        if(nums.length == 1)
        {
            ans.add(nums[0] + "");
            return ans;
        }
        
        for(int i = 1; i < nums.length; i++)
        {    
            if(nums[i] == nums[i-1] + 1)
            {
                end = i;
            }
            else
            {
                if(start == end || start > end)
                {
                    ans.add(nums[start] + "");
                    start = i;
                }
                else
                {
                    ans.add(nums[start] + "->" + nums[end]);
                    start = i;
                }
            }
            if(i == nums.length - 1 && i == start)
            {
                ans.add(nums[i] + "");
            }
            if(i == nums.length - 1 && start < end)
            {
                ans.add(nums[start] + "->" + nums[end]);
            }
        }
        return ans;
    }
}
