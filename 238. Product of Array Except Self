Score : P | Difficulty: Medium(requires thinking)

Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

Accepted
M's slow(?) solution:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int answer[] = new int[nums.length];
        int total = 1;
        for(int i = 0; i < nums.length; i++)
        {
            for(int j = 0; j < nums.length; j++)
            {
                if(j != i){
                    total *= nums[j];
                }
            }
            answer[i] = total;
            total = 1;
        }
        return answer;
    }
}

J's solution:
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] output = new int[nums.length];
        
        int j = 0;
        int i = 0;
        int total = 1;
        
        while(i < nums.length && j < nums.length){
            if( i != j ){
                total *= nums[j];
            }
            j++;
            if(j >= nums.length){
                output[i] = total;
                i++;
                j = 0;
                total = 1;
            }
        }
        
        return output;
    }
}
