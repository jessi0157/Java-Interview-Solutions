Given a string s and a string t, check if s is subsequence of t.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 10^4
Both strings consists only of lowercase characters.

J's solution:

class Solution {
    public boolean isSubsequence(String s, String t) {
        
        int j = 0;
        if(s.length() == 0){
            return true;
        }
        if(s.length() > t.length()){
            return false;   
        }
        for(int i = 0; i < t.length(); i++){         
            if(t.charAt(i) == s.charAt(j)){
                j++;
            }                
            if(j == s.length()){
                return true;
            }  
        }
        return false;
    }
}

M's solution with J's bug fix:
class Solution {
    public boolean isSubsequence(String s, String t) {
        int sLength = s.length();
        int tLength = t.length();
        int goal = 0;
        int sPos = 0;
            
        if(sLength == 0){return true;}
        if(sLength > tLength){return false;}
        
        for(int i = 0; i < tLength; i++){
            if(s.charAt(sPos) == t.charAt(i)){
                goal++;
                sPos++;
            }
            if(goal == sLength){return true;}
        } 
        
        return false;
    }
}
