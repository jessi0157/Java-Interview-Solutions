Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

Example 1:
Input: "Let's take LeetCode contest"
Output: "s'teL ekat edoCteeL tsetnoc"
Note: In the string, each word is separated by single space and there will not be any extra space in the string.

// O(n)
class Solution {
    public String reverseString(String s) {
        String rev = "";
        int length = s.length();
        char[] string = new char[length];
        
        for(int i= length-1; i >= 0; i--){
            string[i] = s.charAt(i);
            rev += string[i];      
        }        
        return rev;
    }
}
//O(nlogn)
/*
    input: HELLO
        HELLO
         /\
       LO  HEL
      /\   /\   
     O L  EL H
     | |  /\ |
     | |  L E|
     | |  | ||
     O L  E LH
     
     output: OLLEH
*/
public class Solution {
    public String reverseString(String s) {
        int length = s.length(); //get length of the string
        if (length <= 1) return s; //if 1 character return character
        String leftStr = s.substring(0, length / 2);    //divide the string into 2
        String rightStr = s.substring(length / 2, length);
        return reverseString(rightStr) + reverseString(leftStr);
    }
}

M's solution(n^2):
class Solution {
    public String reverseWords(String s) {
        String[] myA = s.split(" ");
        String newString = "";
        
        for(int i = 0; i < myA.length; i++)
        {
            for(int j = myA[i].length() - 1; j > -1; j--)
            {
                newString += myA[i].charAt(j);
            }
            if(i != myA.length-1)
            {
                newString += " ";
            }
        }
        return newString;
    }
}
