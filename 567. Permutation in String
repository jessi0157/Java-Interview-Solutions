Score : P | Difficulty Medium
Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

J's Answer with some M help :
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s2.length() == 0 || s1.length() > s2.length()) { return false; }
        String word = "";
        char [] s1s = s1.toCharArray();       
        Arrays.sort(s1s);        
        String s = Arrays.toString(s1s);
        int s1size = s1.length();
        int s2size = s2.length();
        
        for(int i = 0; i < s2size - s1size + 1; i++){
            word = s2.substring(i, s1size + i);
            char [] words = word.toCharArray();       
            Arrays.sort(words);        
            String ws = Arrays.toString(words);            
            if(ws.contains(s)){
                return true;
            }
        }
        return false;
    }
}
