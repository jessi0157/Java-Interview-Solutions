Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within 
the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, 
assume that your function returns 0 when the reversed integer overflows.

//elegant easy solution | discussion
public int reverse(int x)
{
    int result = 0;

    while (x != 0)
    {
        int tail = x % 10;
        int newResult = result * 10 + tail;
        if ((newResult - tail) / 10 != result)
        { return 0; }
        result = newResult;
        x = x / 10;
    }

    return result;
}

//M&M Solution | dont understand integer overflow detection | Score : F
class Solution {
    public int reverse(int x) {
        int original = x;
        boolean isNeg = false;
        long answer = 0;
        int remainder = 0;
        
        if(x < 0)
        {
            isNeg = true;
            x *= -1;
        }
        
        while( x > 0)
        {
            remainder = x % 10;
            answer = (answer * 10) + remainder;
            x /= 10;
        }
        
        //cant figure out integer overflow
        if(answer < Integer.MIN_VALUE || answer > Integer.MAX_VALUE)
        {
            return 0;
        }
       
        if(isNeg)
        {
            answer *= -1;
        }
        return (int)answer;
    }
}
