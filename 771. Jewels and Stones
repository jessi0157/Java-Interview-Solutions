score: P (?) | Difficulty: easy
You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.

The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".

Example 1:

Input: J = "aA", S = "aAAbbbb"
Output: 3
Example 2:

Input: J = "z", S = "ZZ"
Output: 0

J's poopoo solution: 

class Solution {
    public int numJewelsInStones(String J, String S) {
        int counter = 0;
        HashMap<Character, Integer > map = new HashMap<Character,Integer>();
        
        for(int i = 0; i < S.length(); i++){
            if(map.containsKey(S.charAt(i))){
                map.replace( S.charAt(i) , map.get(S.charAt(i)) + 1);
            } else {
                map.put(S.charAt(i) , 1);
            }
        }
        
        for(int i = 0; i < J.length(); i++){
            if(map.containsKey(J.charAt(i))){
                counter += map.get(J.charAt(i));
            }
        }
        return counter;
    }
}

J's better solution: 

class Solution {
    public int numJewelsInStones(String J, String S) {
        int counter = 0;
        HashSet<Character> map = new HashSet<Character>();
        for(int i=0; i < J.length(); i++){
         map.add(J.charAt(i)); 
               
        }
        for(int i=0; i < S.length(); i++){  
            if(map.contains(S.charAt(i))){
                counter++;
            }
        }
        return counter;
    }
}
