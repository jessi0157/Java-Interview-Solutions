Score : P : | Difficulty : Easy ( Took some thinking and debugging)
Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3

J's & M's answer:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode first = head;
        if(head == null){
            return head;
        }
        while(first.next != null){
            if(first.val == first.next.val){
                first.next = first.next.next;
            }
            else{
                first = first.next;
            }
        }
        return head;
    }
}

M's Answer (apperently faster... but weird):
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode answer = new ListNode(-1337);
        ListNode pointer = answer;
        while(head != null)
        {
            if(pointer.val != head.val)
            {
                pointer.next = new ListNode(head.val);
                pointer = pointer.next;
                head = head.next;
            }
            else
            {
                head = head.next;
            }
        }
        return answer.next;
    }
}
Site's Solution(less code,simpler....ish);
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode pointer = head;
        while(pointer != null && pointer.next != null)
        {
            if(pointer.val == pointer.next.val)
            {
                pointer.next = pointer.next.next;
            }
            else
            {
                pointer = pointer.next;
            }
        }
        return head;
    }
}
