//Given a non-empty array of integers, every element appears twice except for one. Find that single one.
//Note:Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?


SOLUTION 1:
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> ans = new HashMap<>();
        for(int i = 0; i < nums.length; i++)
        {
            if(ans.containsKey(nums[i]))
            {
                ans.replace(nums[i], ans.get(nums[i]) + 1);
            }
            else
            {
                ans.put(nums[i],1); //starts at 1
            }
        }
        
        System.out.println(ans);
        for(int i = 0; i < nums.length; i++)
        {
            if(ans.get(nums[i]) == 1)
            {
                return nums[i];
            }
        }
        return 0;
    }
}


SOLUTION 2: 
class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> ans = new HashMap<Integer, Integer>();
        
        for(int i=0; i < nums.length; i++){
            ans.put(nums[i],0);  //starts at 0          
        }
        
        for(int i=0; i < nums.length; i++){
            if(ans.containsKey(nums[i])){
                    ans.replace(nums[i], ans.get(nums[i]) + 1);
                } 
        }
        System.out.println(ans);
        
        for(int i=0; i < nums.length; i++){
            if(ans.get(nums[i]) == 1){
                return nums[i];
            }
        }
        return 0;
    }
}
